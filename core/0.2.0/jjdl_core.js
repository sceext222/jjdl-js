(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (Buffer){
// Generated by CoffeeScript 2.0.2
(function() {
  // file.coffee, jjdl-js/src/_al/android/
  var _file_cache, file_exist, path, pm_bridge, read_file, save_file;

  path = require('path');

  pm_bridge = require('./pm_bridge');

  // file cache to cache check exist and read file
  _file_cache = {};

  file_exist = async function(filename) {
    var raw;
    raw = (await pm_bridge.with_callback({
      type: 'check_cache',
      payload: filename
    }));
    // update cache
    _file_cache[filename] = raw;
    // check no file
    if (raw === null) {
      return false;
    }
    return true;
  };

  // TODO maybe only for 'check_cache' ?
  read_file = async function(filename) {
    var raw;
    // check cache first
    if (_file_cache[filename] != null) {
      return Buffer.from(_file_cache[filename], 'base64');
    }
    // check no such file
    if (_file_cache[filename] === null) { // null, not undefined
      throw new Error(`no such file ${filename}`);
    }
    // read file with pm_bridge
    raw = (await pm_bridge.with_callback({
      type: 'check_cache',
      payload: filename
    }));
    // check no file
    if (raw === null) {
      throw new Error(`no such file ${filename}`);
    }
    // return Buffer
    return Buffer.from(raw, 'base64');
  };

  save_file = async function(filename, data) {
    var b;
    b = Buffer.from(data); // always write blob data
    return (await pm_bridge.with_callback({
      type: 'save_file',
      payload: {
        filename,
        data: b.toString('base64')
      }
    }));
  };

  module.exports = {file_exist, read_file, save_file}; // async // async

}).call(this);

}).call(this,require("buffer").Buffer)
},{"./pm_bridge":4,"buffer":"buffer","path":"path"}],2:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // log.coffee, jjdl-js/src/_al/android/
  var log_line, pm_bridge;

  pm_bridge = require('./pm_bridge');

  // raw log function
  log_line = function(text) {
    return pm_bridge.send({
      type: 'log',
      payload: text
    });
  };

  module.exports = {log_line};

}).call(this);

},{"./pm_bridge":4}],3:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // net.coffee, jjdl-js/src/_al/android/
  var dl_page, request;

  request = require('request-promise-native');

  dl_page = async function(uri, encoding = null, gzip = true) {
    return (await request({uri, encoding, gzip}));
  };

  module.exports = {dl_page}; // async

}).call(this);

},{"request-promise-native":"request-promise-native"}],4:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // pm_bridge.coffee, jjdl-js/src/_al/android/

  // use global:
  //   window

  // global callback pool
  var _callback_pool, _etc, _max_id, _on_msg, send, set_main, with_callback;

  _callback_pool = {};

  // _id: callback function
  _max_id = 0; // unique id counter

  _etc = {
    main: null // main function to invoke
  };

  // global message listener
  _on_msg = function(raw) {
    var msg, name;
    msg = JSON.parse(raw);
    switch (msg.type) {
      case 'args':
        return _etc.main(msg.payload);
      case 'callback':
        if (typeof _callback_pool[name = msg._id] === "function") {
          _callback_pool[name](msg);
        }
        // clean callback pool
        return Reflect.deleteProperty(_callback_pool, msg._id);
    }
  };

  //else: TODO

  // add event listeners for msg recv
  window.addEventListener('message', function(event) {
    return _on_msg(event.data);
  });

  document.addEventListener('message', function(event) {
    return _on_msg(event.data);
  });

  with_callback = function(msg) {
    return new Promise(function(resolve, reject) {
      var callback;
      _max_id += 1;
      msg._id = _max_id;
      callback = function(r) {
        // check error
        if (r.error) {
          reject(new Error(r.payload));
          return;
        }
        // OK
        return resolve(r.payload);
      };
      _callback_pool[msg._id] = callback;
      return send(msg);
    });
  };

  // send with window.postMessage
  send = function(msg) {
    return window.postMessage(JSON.stringify(msg));
  };

  set_main = function(main) {
    return _etc.main = main;
  };

  module.exports = {send, with_callback, set_main}; // async

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // _site.coffee, jjdl-js/src/_site/
  var Site, al, cache, config, util;

  config = require('../config');

  al = require('../al');

  util = require('../util');

  cache = require('../cache');

  Site = class Site { // base site
    constructor(uri1) {
      this.uri = uri1;
      this.meta = null;
      this.chapter = {};
    }

    // download index page
    async dl_index(uri) { // async
      var page;
      // use cache by default
      page = (await cache.load_page(uri));
      return util.parse_html(page, uri);
    }

    // parse index page to get meta data

    // return {  # meta info
    //   url: ''  # meta TO ADD
    //   opt: null  # meta TO ADD

    //   site: ''
    //   page_title: ''

    //   title: ''
    //   author: {
    //     name: ''
    //     url: ''
    //   }

    //   wenan: ''  # for jjwxc
    //   info: ''  # for jjwxc
    //   mark: ''  # for jjwxc

    //   chapter: {
    //     INDEX: {
    //       title: ''
    //       desc: ''
    //       words: -1
    //       time: {
    //         update: ''
    //         release: ''
    //       }
    //       uri: ''
    //     }
    //   }
    //   _jjdl_version: ''  # meta TO ADD
    //   _last_update: ''  # meta TO ADD
    // }
    parse_index($) {
      throw new Error("not implemented"); // MUST be implemented by sub class
    }

    async get_all_index() {} // async

    // download all chapters
    async dl_chapters() { // async
      var i, o, uri;
      // TODO support multi-thread download
      // download with single thread
      o = {};
      for (i in this.meta.chapter) {
        // check url
        uri = this.meta.chapter[i].uri;
        if ((uri == null) || (uri.trim() === '')) {
          al.logw(`skip chapter ${i}: ${this.meta.chapter[i].title}  (url = ${uri})`);
          continue;
        }
        // download with cache
        o[i] = (await cache.load_page(uri));
      }
      return o;
    }

    // return {
    //   text: ''  # chapter text
    // }
    parse_one_chapter($) {
      throw new Error("not implemented");
    }

    // main entry: the whole download process

    // return {
    //   meta: {}  # meta info
    //   chapter: {}  # each chapter info (chapter text)
    // }
    async main(opt) { // async
      var $, i, raw;
      // process index page
      $ = (await this.dl_index(this.uri));
      this.meta = this.parse_index($);
      await this.get_all_index();
      // add meta
      this.meta.url = this.uri;
      this.meta.opt = opt;
      this.meta._jjdl_version = config.P_VERSION;
      this.meta._last_update = util.last_update();
      // DEBUG meta info (from index page)
      al.logi(`chapter ${(Object.keys(this.meta.chapter).length)}: ${this.meta.title}  @${this.meta.author.name}  (${this.meta.page_title})`);
      raw = (await this.dl_chapters());
      al.logd("parse chapters .. . ");
      for (i in raw) {
        $ = util.parse_html(raw[i], this.meta.chapter[i].uri); // parse page (html) here
        this.chapter[i] = this.parse_one_chapter($);
      }
      return {meta: this.meta, chapter: this.chapter};
    }

    // entry: for re-pack chapters
    pre_pack(data) {
      return data;
    }

    // entry: pack all chapters' text to one file
    pack(data) {
      return util.pack(data);
    }

  };

  module.exports = Site; // class

}).call(this);

},{"../al":17,"../cache":18,"../config":19,"../util":22}],6:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // jjwxc.coffee, jjdl-js/src/_site/
  // site: http://www.jjwxc.net
  var Jjwxc, Site, _clean_index_text, util;

  util = require('../util');

  Site = require('./_site');

  _clean_index_text = function(raw, join = ' ') {
    return util.clean_text([raw], join);
  };

  Jjwxc = class Jjwxc extends Site {
    parse_index($) {
      var a, author_a, i, index, j, o, one, raw_list, readtd, ref, sptd, td, td_time;
      o = {
        url: null,
        opt: null,
        site: 'jjwxc',
        page_title: $('title').text().trim()
      };
      sptd = $('.sptd');
      readtd = $('.readtd');
      // title and author
      o.title = _clean_index_text($('h1', sptd[0]).text());
      author_a = $('h2 a', sptd[0]);
      o.author = {
        name: author_a.text(),
        url: author_a.attr('href')
      };
      o.wenan = util.clean_text(util.$_to_text($, util.$_get_all_text($, readtd[0])));
      o.mark = util.clean_text(util.$_to_text($, util.$_get_all_text($, sptd[sptd.length - 1])), '  ');
      o.info = util.clean_text(util.$_to_text($, util.$_get_all_text($, readtd[1])), ' ');
      // chapter list
      o.chapter = {};
      raw_list = $('#oneboolt tr[itemprop~=chapter]');
      for (i = j = 0, ref = raw_list.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        // TODO ignore bad chapter
        a = $('a', raw_list[i]);
        if (a.length < 1) {
          continue; // ignore this item
        }
        td = $('td', raw_list[i]);
        td_time = td[td.length - 1];
        // get more chapter info
        one = {
          title: _clean_index_text(a.text()),
          desc: _clean_index_text($(td[2]).text()),
          words: Number.parseInt($('[itemprop=wordCount]', raw_list[i]).text()),
          time: {
            update: _clean_index_text($(td_time).text()),
            release: _clean_index_text($(td_time).attr('title'))
          },
          uri: a.attr('href')
        };
        index = $($('td', raw_list[i])[0]).text().trim();
        o.chapter[index] = one;
      }
      return o;
    }

    parse_one_chapter($) {
      var noveltext, raw, text;
      noveltext = $('div.noveltext');
      raw = util.$_get_all_text($, noveltext);
      // remove no use text
      raw = raw.not(util.$_get_all_text($, $('> div', noveltext).slice(0, 2)));
      raw = raw.not(util.$_get_all_text($, $('#favorite_3', noveltext)));
      // TODO more clean
      // TODO add one line after '作者有话说'
      text = util.clean_text(util.$_to_text($, raw));
      return {text};
    }

  };

  module.exports = Jjwxc; // class

}).call(this);

},{"../util":22,"./_site":5}],7:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // mjjwxc.coffee, jjdl-js/src/_site/
  // site: http://m.jjwxc.net/
  var Mjjwxc, Site, util;

  util = require('../util');

  Site = require('./_site');

  Mjjwxc = (function() {
    var _INDEX_URL_SUFFIX;

    class Mjjwxc extends Site {
      async dl_index(uri) { // async
        // check index url and fix it
        if (uri.indexOf('?') !== -1) {
          uri = uri.split('?')[0];
        }
        uri += _INDEX_URL_SUFFIX;
        return (await super.dl_index(uri));
      }

      parse_index($) {
        var author_a, i, index, j, o, one, raw_list, ref, text;
        o = {
          url: null,
          opt: null,
          site: 'mjjwxc',
          page_title: $('title').text().trim()
        };
        // title and author
        o.title = $('div.b.module > h2.big.o').text().split('>')[1].trim();
        author_a = $('#info #left > li:first-child a');
        o.author = {
          name: author_a.text(),
          url: author_a.prop('href')
        };
        o.wenan = util.clean_text(util.$_to_text($, util.$_get_all_text($, $('#novelintro'))));
        o.mark = util.clean_text(util.$_to_text($, util.$_get_all_text($, $('#novelintro').next())), '  ');
        o.info = util.clean_text(util.$_to_text($, util.$_get_all_text($, $('#info #left'))), '  ');
        // chapter list
        o.chapter = {};
        raw_list = $('div.b.module > div:nth-child(3) > a');
        for (i = j = 0, ref = raw_list.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          // TODO ignore bad chapter
          text = $(raw_list[i]).text();
          one = {
            title: text.slice(text.indexOf('.') + 1).trim(),
            desc: '', // not support
            uri: $(raw_list[i]).prop('href')
          };
          index = Number.parseInt(text.split('.')[0]);
          o.chapter[index] = one;
        }
        return o;
      }

      parse_one_chapter($) {
        var noveltext, raw, text;
        noveltext = $('div.b.module > div:nth-child(2)');
        raw = util.$_get_all_text($, noveltext);
        // TODO get more info
        text = util.clean_text(util.$_to_text($, raw));
        return {text};
      }

    };

    // eg: http://m.jjwxc.net/book2/3010233?more=1&whole=1
    _INDEX_URL_SUFFIX = '?more=1&whole=1';

    return Mjjwxc;

  })();

  module.exports = Mjjwxc; // class

}).call(this);

},{"../util":22,"./_site":5}],8:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // _c_base.coffee, jjdl-js/src/_site/myushuwu/
  // re-pack chapters of myushuwu
  var CBase, Myushuwu, N_CHAR, al, util;

  util = require('../../util');

  al = require('../../al');

  Myushuwu = require('./myushuwu');

  N_CHAR = '0123456789';

  CBase = class CBase extends Myushuwu {
    // for sub-class
    get_site() {
      throw new Error('not implemented');
    }

    // check next chapter mark
    check_chapter_line(text, chapter_index) {
      throw new Error('not implemented'); // for sub-class
    }

    pre_pack(data) {
      var chapter_index, chapter_text, check, i, j, len, one_chapter, one_chapter_text, raw_text;
      // DEBUG
      al.logd("repack chapters .. . ");
      // reset site
      data.meta.site = this.get_site();
      data.meta._old_chapter = util.json_clone(data.meta.chapter);
      // concat all chapters raw text
      chapter_text = [];
      for (i in data.chapter) {
        chapter_text.push(data.chapter[i].text);
      }
      raw_text = chapter_text.join('\n').split('\n');
      // reset each chapter
      data.meta.chapter = {};
      data.chapter = {};
      chapter_index = 0;
      one_chapter_text = []; // one chapter lines
      one_chapter = {
        title: '',
        desc: ''
      };
      for (j = 0, len = raw_text.length; j < len; j++) {
        i = raw_text[j];
        // check next chapter mark
        check = this.check_chapter_line(i, chapter_index);
        if (check != null) {
          // save last chapter
          data.meta.chapter[chapter_index] = one_chapter;
          data.chapter[chapter_index] = {
            text: one_chapter_text.join('\n')
          };
          // reset chapter
          one_chapter_text = [];
          one_chapter = check;
          chapter_index += 1;
          // support reset chapter_index
          if (check._chapter_index != null) {
            chapter_index = check._chapter_index;
          }
        } else {
          one_chapter_text.push(i);
        }
      }
      // check add last chapter
      if (one_chapter_text.length > 0) {
        data.meta.chapter[chapter_index] = one_chapter;
        data.chapter[chapter_index] = {
          text: one_chapter_text.join('\n')
        };
      }
      // reset _last_update
      data.meta._last_update = util.last_update();
      return data;
    }

  };

  module.exports = {N_CHAR, CBase}; // class

}).call(this);

},{"../../al":17,"../../util":22,"./myushuwu":9}],9:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // myushuwu.coffee, jjdl-js/src/_site/myushuwu/
  // site: https://m.yushuwu.com/
  var Myushuwu, Site, _SITE_LIST_REVERSE_MARK, al, cache, util;

  util = require('../../util');

  al = require('../../al');

  cache = require('../../cache');

  Site = require('../_site');

  _SITE_LIST_REVERSE_MARK = 'ul,li{transform: rotate(180deg);}';

  Myushuwu = class Myushuwu extends Site {
    parse_index($) {
      var after, before, chapter_num, end, first, guess_num, h, i, index, j, k, l, last, len, o, one, raw_list, ref, ref1, ref2, start, wenan;
      o = {
        url: null,
        opt: null,
        site: 'myushuwu',
        page_title: $('title').text().trim()
      };
      // title and author
      h = $('ul.h_nav_items > li');
      o.title = $(h[h.length - 1]).text().trim();
      o.author = {
        name: $('td.article_info_td h2').text().trim()
      };
      wenan = $('pre', $('div.lb_jj').next());
      o.wenan = util.clean_text(util.$_to_text($, util.$_get_all_text($, wenan)));
      o.info = util.clean_text(util.$_to_text($, util.$_get_all_text($, $('.article_info_td'))), '  ');
      // chapter list
      o.chapter = {};
      raw_list = $('.lb_mulu.chapterList li a');
      // guess all chapters
      first = $(raw_list[0]).prop('href');
      last = $(raw_list[raw_list.length - 1]).prop('href');
      before = first.slice(0, +first.lastIndexOf('/') + 1 || 9e9);
      after = first.slice(first.lastIndexOf('.'));
      start = Number.parseInt(first.slice(first.lastIndexOf('/') + 1, first.lastIndexOf('.')));
      end = Number.parseInt(last.slice(last.lastIndexOf('/') + 1, last.lastIndexOf('.')));
      // check chapter numbers
      chapter_num = util.get_first_number($('.lb_mulu.chapterList h3 span').text());
      guess_num = end - start + 1;
      if (chapter_num === guess_num) {
        // check pass, use old guess method
        index = 0;
        for (i = j = ref = start, ref1 = end; ref <= ref1 ? j <= ref1 : j >= ref1; i = ref <= ref1 ? ++j : --j) {
          one = {
            title: '', // not support
            desc: '',
            uri: `${before}${i}${after}`
          };
          index += 1;
          o.chapter[index] = one;
        }
      // use raw list if possible
      } else if (chapter_num === raw_list.length) {
        for (i = k = 0, ref2 = raw_list.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
          one = {
            title: '',
            desc: '',
            uri: $(raw_list[i]).prop('href')
          };
          o.chapter[i + 1] = one; // check index list a
        }
      } else {
        for (l = 0, len = raw_list.length; l < len; l++) {
          i = raw_list[l];
          if ($(i).text().indexOf('...') !== -1) {
            o._index_list_page = $(i).prop('href');
            break;
          }
        }
        if (o._index_list_page != null) {
          o._chapter_num = chapter_num; // FIXME
        } else {
          throw new Error(`bad chapter number, ${guess_num} != ${chapter_num}`);
        }
      }
      return o;
    }

    // eg: 'javascript:goChapter(52632,6844354);' -> 'https://m.yushuwu.com/novel/52632/6844354.html'
    _parse_go_chapter(raw, good) {
      var args, o, p;
      p = good.split('/');
      args = raw.split('(')[1].split(')')[0].split(',');
      p[p.length - 2] = args[0].trim();
      p[p.length - 1] = args[1].trim() + '.' + p[p.length - 1].split('.')[1];
      o = p.join('/');
      // DEBUG
      al.logw(`href: ${raw} -> ${o}`);
      return o;
    }

    _parse_one_index_list($, raw_list) {
      var a, a_list, href, i, j, next, ref, style;
      style = $('style').text();
      a_list = $('body>ul>li>a');
      // check reverse list
      if (style.indexOf(_SITE_LIST_REVERSE_MARK) !== -1) {
        a_list = Array.from(a_list).reverse();
      }
      // add each chapter page
      for (i = j = 1, ref = a_list.length - 1; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
        a = a_list[i];
        href = $(a).prop('href');
        if (!href.startsWith('http')) {
          href = this._parse_go_chapter(href, raw_list[0]);
        }
        raw_list.push(href);
      }
      // FIXME DEBUG
      //al.logd "FIXME: #{$(a).text()}"

      // check next page
      next = $('#next').prop('href');
      if (next.startsWith('http')) {
        return next;
      } else {
        return null;
      }
    }

    async get_all_index() { // async
      var $, i, index, index_list, j, len, one, raw_list, results;
      if (this.meta._index_list_page == null) {
        return;
      }
      // DEBUG
      al.logd(`try to get ${this.meta._chapter_num} index .. . `);
      raw_list = []; // URL in this list
      // download all index list pages and get all chapter items
      index_list = this.meta._index_list_page;
      while (index_list != null) {
        $ = util.parse_html((await cache.load_page(index_list)), index_list);
        index_list = this._parse_one_index_list($, raw_list);
      }
      // check chapter_num, again
      if (raw_list.length !== this.meta._chapter_num) {
        throw new Error(`bad chapter number: ${raw_list.length} != ${this.meta._chapter_num}`);
      }
      // make meta info
      index = 0;
      results = [];
      for (j = 0, len = raw_list.length; j < len; j++) {
        i = raw_list[j];
        one = {
          title: '',
          desc: '',
          uri: i
        };
        index += 1;
        results.push(this.meta.chapter[index] = one);
      }
      return results;
    }

    parse_one_chapter($) {
      var noveltext, text;
      noveltext = $('#nr1');
      text = util.clean_text(util.$_to_text($, util.$_get_all_text($, noveltext)));
      return {text};
    }

  };

  module.exports = Myushuwu; // class

}).call(this);

},{"../../al":17,"../../cache":18,"../../util":22,"../_site":5}],10:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // myushuwu_c.coffee, jjdl-js/src/_site/myushuwu/
  // re-pack chapters of myushuwu

  // support chapter title:
  //   '1 XXX'   '2 YYY'   '3 ZZZ'
  //   '01'      '02'      '03'
  //   '01 XXX'  '02 YYY'  '03 ZZZ'
  var CBase, MyushuwuC, N_CHAR;

  ({N_CHAR, CBase} = require('./_c_base'));

  MyushuwuC = class MyushuwuC extends CBase {
    get_site() {
      return 'myushuwu-c';
    }

    // for sub-class
    check_chapter_index(chapter_index, n) {
      if (n === (chapter_index + 1)) {
        return {
          ok: true
        };
      } else {
        return {};
      }
    }

    // check next chapter mark
    check_chapter_line(text, chapter_index) {
      var _c, i, j, n, o, ref;
      // skip start number, eg:  '01'  '02'  '03'
      for (i = j = 0, ref = text.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (N_CHAR.indexOf(text[i]) === -1) {
          break;
        }
      }
      // check full number
      if (i === text.length) {
        n = Number.parseInt(text);
        _c = this.check_chapter_index(chapter_index, n);
        if (_c.ok) {
          return {
            title: text.trim(),
            desc: '',
            _chapter_index: _c._chapter_index // support reset chapter_index
          };
        }
        return null; // just trim(), not check special char
      } else {
        o = {
          title: text.slice(0, i).trim(),
          desc: text.slice(i).trim()
        };
      }
      n = Number.parseInt(text.slice(0, i));
      _c = this.check_chapter_index(chapter_index, n);
      if (_c.ok) {
        o._chapter_index = _c._chapter_index;
        return o;
      } else {
        return null;
      }
    }

  };

  module.exports = MyushuwuC; // class

}).call(this);

},{"./_c_base":8}],11:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // myushuwu_c2.coffee, jjdl-js/src/_site/myushuwu/
  // re-pack chapters of myushuwu

  // support chapter title:
  //   '第一章'  '第二章'
  var CBase, MyushuwuC2, _MARK_CHAR, _N_CHAR, _N_MAX;

  ({CBase} = require('./_c_base'));

  _MARK_CHAR = ['第', '章'];

  _N_CHAR = '一二三四五六七八九十百千';

  _N_MAX = 8;

  MyushuwuC2 = class MyushuwuC2 extends CBase {
    get_site() {
      return 'myushuwu-c2';
    }

    // for sub-class
    get_n_char() {
      return _N_CHAR;
    }

    check_chapter_line(text, chapter_index) {
      var i, j, line, ref;
      line = text.trim();
      if (line[0] !== _MARK_CHAR[0]) {
        return null;
      }
      // deep check
      for (i = j = 1, ref = _N_MAX; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        if (this.get_n_char().indexOf(line[i]) === -1) {
          break;
        }
      }
      if (line[i] !== _MARK_CHAR[1]) {
        return null;
      }
      return {
        title: line.slice(0, +i + 1 || 9e9).trim(),
        desc: line.slice(i + 1).trim()
      };
    }

  };

  module.exports = MyushuwuC2; // class

}).call(this);

},{"./_c_base":8}],12:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // myushuwu_c3.coffee, jjdl-js/src/_site/myushuwu/
  // re-pack chapters of myushuwu

  // support chapter title:
  //   '第01章'  '第02章'
  var MyushuwuC2, MyushuwuC3, N_CHAR;

  ({N_CHAR} = require('./_c_base'));

  MyushuwuC2 = require('./myushuwu_c2');

  MyushuwuC3 = class MyushuwuC3 extends MyushuwuC2 {
    get_site() {
      return 'myushuwu-c3';
    }

    get_n_char() {
      return N_CHAR;
    }

  };

  module.exports = MyushuwuC3; // class

}).call(this);

},{"./_c_base":8,"./myushuwu_c2":11}],13:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // myushuwu_c4.coffee, jjdl-js/src/_site/myushuwu/
  // improve for myushuwu_c, support skip chapter index
  var MyushuwuC, MyushuwuC4;

  MyushuwuC = require('./myushuwu_c');

  MyushuwuC4 = class MyushuwuC4 extends MyushuwuC {
    get_site() {
      return 'myushuwu-c4';
    }

    check_chapter_index(chapter_index, n) {
      if (n >= (chapter_index + 1)) {
        return {
          ok: true,
          _chapter_index: n // support reset chapter_index
        };
      } else {
        return {};
      }
    }

  };

  module.exports = MyushuwuC4; // class

}).call(this);

},{"./myushuwu_c":10}],14:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // pack.coffee, jjdl-js/src/_util/
  var _make_main_name, _make_time_name, _pack_last, _pack_meta, _pack_one_chapter, al, config, indent_line, last_update, meta_filename, pack, pack_filename;

  config = require('../config');

  al = require('../al');

  ({last_update} = require('./util'));

  ({indent_line} = require('./text'));

  // TODO improve words count

  // first part of final pack text
  _pack_meta = function(data, words_count) {
    var o, title;
    o = '\n\n';
    o += `jjdl-js:: URL ${data.meta.url}\n`;
    o += `jjdl-js:: ${config.P_VERSION}\n\n`;
    // title and page_title
    title = `${data.meta.title}  @${data.meta.author.name}`;
    if (data.meta.author.url != null) {
      title += ` <${data.meta.author.url}>`;
    }
    o += `${title}\n`;
    o += `(${data.meta.page_title})\n\n`;
    // wenan, info, mark  # for jjwxc
    if (data.meta.wenan != null) {
      o += `${indent_line(data.meta.wenan)}\n\n`;
    }
    if (data.meta.info != null) {
      o += `${data.meta.info}\n\n`;
    }
    if (data.meta.mark != null) {
      o += `${data.meta.mark}\n\n`;
    }
    // words count
    o += `jjdl-js:: chapter count ${(Object.keys(data.chapter).length)}, words count ${words_count} \n`;
    o += `jjdl-js:: last_update ${last_update()}\n\n`;
    return o;
  };

  // last part of final pack text
  _pack_last = function(data, words_count) {
    var o;
    o = '\n';
    o += `jjdl-js:: URL ${data.meta.url}\n`;
    o += `jjdl-js:: title ${data.meta.title}  @${data.meta.author.name}\n`;
    o += `    chapter count ${(Object.keys(data.chapter).length)}, words count ${words_count} \n`;
    o += `jjdl-js: last_update ${last_update()}\n\n`;
    return o;
  };

  _pack_one_chapter = function(data, index) {
    var c, chapter_name, main_text, o, words_count;
    o = '\n';
    // TODO improve zfill to chapter count
    c = `${index}`;
    if (c.length < 2) {
      c = '0' + c;
    }
    chapter_name = `第 ${c} 章  ${data.meta.chapter[index].title}  ${data.meta.chapter[index].desc}`;
    o += `${chapter_name}\n`;
    // main text
    main_text = data.chapter[index].text;
    o += `${indent_line(main_text)
    // raw chapter text
}\n`;
    // add words count
    words_count = main_text.length;
    o += `jjdl-js:: words count ${words_count} \n\n`;
    return o;
  };

  pack = function(data) {
    var i, o, words_count;
    // words count first
    words_count = 0;
    for (i in data.chapter) {
      words_count += data.chapter[i].text.length;
    }
    o = _pack_meta(data, words_count);
    // pack each chapter
    for (i in data.chapter) {
      o += _pack_one_chapter(data, i);
    }
    o += _pack_last(data, words_count);
    // DEBUG words count
    al.logi(`words count ${words_count}`);
    return o;
  };

  _make_main_name = function(meta) {
    var author, title;
    title = meta.title.split('\n').join(' ').split(' ').join('-');
    author = meta.author.name.trim();
    return `${title}@${author}-${meta.site}`;
  };

  _make_time_name = function() {
    var date, t, time_s;
    // TODO support GMT+0800 (CST)
    t = new Date().toISOString();
    date = t.split('T')[0].split('-').join('');
    time_s = t.split('T')[1].split('.')[0].split(':').join('');
    return `${date}-${time_s}`;
  };

  pack_filename = function(meta) {
    return `${_make_main_name(meta)}-${_make_time_name(meta)}${config.PACK_FILE}`;
  };

  meta_filename = function(meta) {
    return `${config.META_FILE[0]}${_make_main_name(meta)}${config.META_FILE[1]}`;
  };

  module.exports = {pack, pack_filename, meta_filename};

}).call(this);

},{"../al":17,"../config":19,"./text":15,"./util":16}],15:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // text.coffee, jjdl-js/src/_util/
  var _NUM_CHAR, clean_html_text, clean_text, get_first_number, indent_line;

  _NUM_CHAR = '0123456789';

  clean_html_text = function(raw) {
    var i, j, len, o, one;
    o = [];
    for (j = 0, len = raw.length; j < len; j++) {
      i = raw[j];
      // replace \r, \n, tab to space (' ')
      one = i.split('\r').join(' ').split('\n').join(' ').split('\t').join(' ');
      // replace chinese BIG space
      one = one.split('　').join(' ');
      // replace multi spaces to only one space
      while (one.indexOf('  ') !== -1) {
        one = one.split('  ').join(' ');
      }
      o.push(one);
    }
    return o;
  };

  clean_text = function(raw, join = '\n') {
    var a, i, j, len, o, one;
    a = clean_html_text(Array.from(raw));
    o = [];
    for (j = 0, len = a.length; j < len; j++) {
      i = a[j];
      one = i.trim();
      if (one !== '') {
        o.push(one);
      }
    }
    return o.join(join);
  };

  indent_line = function(raw, prefix = '  ') {
    var a, i, j, len, o;
    a = raw.split('\n');
    o = [];
    for (j = 0, len = a.length; j < len; j++) {
      i = a[j];
      if (i.trim() !== '') {
        i = prefix + i;
      }
      o.push(i);
    }
    return o.join('\n');
  };

  // get first number from one line, eg: 'X 123 Y'
  get_first_number = function(raw, default_value = null) {
    var end, i, j, ref, start;
    start = null;
    end = null;
    // scan num char
    for (i = j = 0, ref = raw.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if ((start == null) && (_NUM_CHAR.indexOf(raw[i]) !== -1)) {
        start = i;
      } else if ((start != null) && (_NUM_CHAR.indexOf(raw[i]) === -1)) {
        end = i;
        break;
      }
    }
    if (start == null) {
      if (default_value != null) {
        return default_value;
      } else {
        throw new Error(`no number in text: \`${raw}\``);
      }
    }
    if (end == null) {
      end = raw.length;
    }
    // parse number
    return Number.parseInt(raw.slice(start, end));
  };

  module.exports = {clean_html_text, clean_text, indent_line, get_first_number};

}).call(this);

},{}],16:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // util.coffee, jjdl-js/src/_util/
  // NOTE: not forget to patch jquery (init code) to work in WebView (on android)
  var $_get_all_text, $_to_text, JSDOM, jquery, json_clone, last_update, parse_html, print_json;

  ({JSDOM} = require('jsdom'));

  jquery = require('jquery');

  parse_html = function(raw, url) {
    var dom;
    dom = new JSDOM(raw, {url});
    return jquery(dom.window);
  };

  $_get_all_text = function($, raw) {
    var set;
    set = $(raw).add($('*', raw));
    return set.contents().filter(function() {
      return this.nodeType === 3;
    });
  };

  $_to_text = function($, raw) {
    var a, i, j, len, o;
    a = Array.from(raw);
    // sort text by document order
    a = $.uniqueSort(a);
    o = [];
    for (j = 0, len = a.length; j < len; j++) {
      i = a[j];
      o.push($(i).text());
    }
    return o;
  };

  last_update = function() {
    return `${new Date().toISOString()}Z`;
  };

  print_json = function(data) {
    return JSON.stringify(data, '', '    ') + '\n';
  };

  json_clone = function(raw) {
    return JSON.parse(JSON.stringify(raw));
  };

  module.exports = {parse_html, $_get_all_text, $_to_text, last_update, print_json, json_clone};

}).call(this);

},{"jquery":"jquery","jsdom":"jsdom"}],17:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // al.coffee, jjdl-js/src/
  var config, dl_page, file_exist, log, log_line, logd, loge, logi, logr, logw, read_file, save_file;

  config = require('./config');

  ({dl_page} = require('./_al/android/net'));

  ({log_line} = require('./_al/android/log'));

  ({file_exist, read_file, save_file} = require('./_al/android/file'));

  // raw log
  logr = function(text) {
    return log_line(text);
  };

  log = function(text, prefix = config.LOG_PREFIX) {
    return logr(`${prefix}: ${text}`);
  };

  logd = function(text) {
    return log(text, `${config.LOG_PREFIX}.${config.LOG_P.d}`);
  };

  logw = function(text) {
    return log(text, `${config.LOG_PREFIX}.${config.LOG_P.w}`);
  };

  loge = function(text) {
    return log(text, `${config.LOG_PREFIX}.${config.LOG_P.e}`);
  };

  logi = function(text) {
    return log(text, `${config.LOG_PREFIX}.${config.LOG_P.i}`);
  };

  module.exports = {logr, log, logd, logw, loge, logi, dl_page, file_exist, read_file, save_file}; // async // async // async // async

}).call(this);

},{"./_al/android/file":1,"./_al/android/log":2,"./_al/android/net":3,"./config":19}],18:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // cache.coffee, jjdl-js/src/
  var _EU_C, _EU_CHAR, _escape_url, al, config, load_page, path, url;

  url = require('url');

  path = require('path');

  config = require('./config');

  al = require('./al');

  // escape urls (for filename, path)
  _EU_CHAR = '#';

  _EU_C = {
    '#': '#',
    ':': '=', // colon
    '/': '-', // slash
    '?': '_', // question mark
    '&': '+', // And
    '*': 'a', // Asterisk
    '\\': 'b', // Backslash
    '"': 'd', // Double quotation marks
    '>': 'g', // Greater than
    '<': 'l', // Less than
    '|': 'p', // Pipe
    '\'': 'q' // Quote mark
  };

  _escape_url = function(raw) {
    var c, j, len, o;
    o = '';
    for (j = 0, len = raw.length; j < len; j++) {
      c = raw[j];
      if (_EU_C[c] != null) {
        o += _EU_CHAR + _EU_C[c];
      } else {
        o += c;
      }
    }
    return o;
  };

  load_page = async function(uri) {
    var cache_file, data, i;
    // check cache file
    i = url.parse(uri);
    cache_file = path.join(config.CACHE_DIR, _escape_url(i.host), _escape_url(i.path));
    if ((await al.file_exist(cache_file))) {
      al.logd(`cache HIT ${cache_file}`);
      return (await al.read_file(cache_file)); // download page
    } else {
      al.logd(`GET ${uri}`);
      data = (await al.dl_page(uri));
      await al.save_file(cache_file, data); // update cache
      return data;
    }
  };

  // TODO clean cache ?
  module.exports = {load_page}; // async

}).call(this);

},{"./al":17,"./config":19,"path":"path","url":"url"}],19:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // config.coffee, jjdl-js/src/
  var CACHE_DIR, LOG_P, LOG_PREFIX, META_FILE, OUTPUT_DIR, PACK_FILE, P_VERSION;

  P_VERSION = 'jjdl-js version 0.2.3-1 test20171114 2040';

  LOG_PREFIX = 'jjdl-js';

  LOG_P = {
    d: 'D', // DEBUG
    w: 'W', // WARNING
    e: 'E', // ERROR
    i: 'I', // INFO
    o: ' [ OK ] '
  };

  CACHE_DIR = 'cache';

  OUTPUT_DIR = 'dl';

  META_FILE = ['jjdl-', '-meta.json'];

  PACK_FILE = '-jjdl.txt';

  module.exports = {P_VERSION, LOG_PREFIX, LOG_P, CACHE_DIR, OUTPUT_DIR, META_FILE, PACK_FILE};

}).call(this);

},{}],20:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // jjdl.coffee, jjdl-js/src/
  // main entry of jjdl-js (jjdl_core for jjdl_android)
  var _init, _main, _save_meta, al, config, main, path, pm_bridge, site, util;

  path = require('path');

  config = require('./config');

  util = require('./util');

  al = require('./al');

  site = require('./site');

  pm_bridge = require('./_al/android/pm_bridge');

  _save_meta = async function(data) {
    var meta_file;
    meta_file = path.join(config.OUTPUT_DIR, util.meta_filename(data.meta));
    return (await al.save_file(meta_file, util.print_json(data.meta)));
  };

  main = async function(site_name, uri) { // async
    var core, data, result_file, text;
    // DEBUG
    al.logd(config.P_VERSION);
    al.logd(`site = [${site_name}], url = ${uri}`);
    core = site.create(site_name, uri);
    data = (await core.main());
    // first meta file
    await _save_meta(data);
    // pre-pack and second meta file
    data = core.pre_pack(data);
    await _save_meta(data);
    text = core.pack(data);
    // save result text file
    result_file = path.join(config.OUTPUT_DIR, util.pack_filename(data.meta));
    await al.save_file(result_file, text);
    // DEBUG
    return al.logd(`output /sdcard/jjdl/${result_file}`);
  };

  _main = async function(args) {
    var e;
    try {
      await main(args.site, args.url);
    } catch (error) {
      e = error;
      al.loge(`unknow ERROR: ${e}  ${e.stack}`);
    }
    // always send end msg
    return pm_bridge.send({
      type: 'end'
    });
  };

  _init = function() {
    pm_bridge.set_main(_main);
    // init message
    pm_bridge.send({
      type: 'start'
    });
    // DEBUG
    return console.log("DEBUG: init done.");
  };

  _init();

}).call(this);

},{"./_al/android/pm_bridge":4,"./al":17,"./config":19,"./site":21,"./util":22,"path":"path"}],21:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // site.coffee, jjdl-js/src/
  var Jjwxc, Mjjwxc, Myushuwu, MyushuwuC, MyushuwuC2, MyushuwuC3, MyushuwuC4, SITE_LIST, create;

  Jjwxc = require('./_site/jjwxc');

  Mjjwxc = require('./_site/mjjwxc');

  Myushuwu = require('./_site/myushuwu/myushuwu');

  MyushuwuC = require('./_site/myushuwu/myushuwu_c');

  MyushuwuC2 = require('./_site/myushuwu/myushuwu_c2');

  MyushuwuC3 = require('./_site/myushuwu/myushuwu_c3');

  MyushuwuC4 = require('./_site/myushuwu/myushuwu_c4');

  SITE_LIST = {
    'jjwxc': Jjwxc,
    'mjjwxc': Mjjwxc,
    'myushuwu': Myushuwu,
    'myushuwu-c': MyushuwuC,
    'myushuwu-c2': MyushuwuC2,
    'myushuwu-c3': MyushuwuC3,
    'myushuwu-c4': MyushuwuC4
  };

  create = function(site, uri) {
    var core;
    core = SITE_LIST[site];
    if (core == null) {
      throw new Error(`no such site [${site}]`);
    }
    return new core(uri);
  };

  module.exports = {SITE_LIST, create};

}).call(this);

},{"./_site/jjwxc":6,"./_site/mjjwxc":7,"./_site/myushuwu/myushuwu":9,"./_site/myushuwu/myushuwu_c":10,"./_site/myushuwu/myushuwu_c2":11,"./_site/myushuwu/myushuwu_c3":12,"./_site/myushuwu/myushuwu_c4":13}],22:[function(require,module,exports){
// Generated by CoffeeScript 2.0.2
(function() {
  // util.coffee, jjdl-js/src/
  var $_get_all_text, $_to_text, clean_html_text, clean_text, get_first_number, indent_line, json_clone, last_update, meta_filename, pack, pack_filename, parse_html, print_json;

  ({parse_html, $_get_all_text, $_to_text, last_update, print_json, json_clone} = require('./_util/util'));

  ({pack, pack_filename, meta_filename} = require('./_util/pack'));

  ({clean_html_text, clean_text, indent_line, get_first_number} = require('./_util/text'));

  module.exports = {parse_html, $_get_all_text, $_to_text, last_update, print_json, json_clone, pack, pack_filename, meta_filename, clean_html_text, clean_text, indent_line, get_first_number};

}).call(this);

},{"./_util/pack":14,"./_util/text":15,"./_util/util":16}]},{},[20]);
